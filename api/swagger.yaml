openapi: 3.0.3
info:
  title: SIMKES RESTful API Documentation
  description: Dockerized RESTful API for Health Information System, built using Go with Clean Architecture and automated CI/CD pipeline.
  version: 0.6.X
externalDocs:
  description: API Documentation in Postman
  url: https://documenter.getpostman.com/view/23649536/2sA2rDy1iF
servers:
  - url: https://simkes.fathoor.dev/v1
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Create user session token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nip:
                  type: string
                  maxLength: 5
                  example: "D0100"
                password:
                  type: string
                  maxLength: 20
                  example: "dokter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  expired:
                    type: string
  /pegawai:
    post:
      tags:
        - Pegawai
      summary: Create new pegawai
      description: Create new pegawai data
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pegawai'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/Pegawai'
    get:
      tags:
        - Pegawai
      summary: Get all pegawai
      description: Get all pegawai data or per page (optional)
      parameters:
        - in: query
          name: page
          required: false
          description: Page number
          schema:
            type: integer
            example: 1
        - in: query
          name: size
          required: false
          description: Page size
          schema:
            type: integer
            example: 10
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Pegawai'
  /pegawai/{nip}:
    get:
      tags:
        - Pegawai
      summary: Get pegawai by NIP
      description: Get pegawai data by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Pegawai'
    put:
      tags:
        - Pegawai
      summary: Update pegawai by NIP
      description: Update pegawai data by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pegawai'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Pegawai'
    delete:
      tags:
        - Pegawai
      summary: Delete pegawai by NIP
      description: Delete pegawai data by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /akun:
    post:
      tags:
        - Akun
      summary: Create new akun
      description: Create new user account
      security:
        - Authorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AkunRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/AkunResponse'
    get:
      tags:
        - Akun
      summary: Get all akun
      description: Get all akun user or per page (optional)
      parameters:
        - in: query
          name: page
          required: false
          description: Page number
          schema:
            type: integer
            example: 1
        - in: query
          name: size
          required: false
          description: Page size
          schema:
            type: integer
            example: 10
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AkunResponse'
  /akun/{nip}:
    get:
      tags:
        - Akun
      summary: Get akun by NIP
      description: Get akun user by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AkunResponse'
    put:
      tags:
        - Akun
      summary: Update akun by NIP
      description: Update akun user by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AkunRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/AkunResponse'
    delete:
      tags:
        - Akun
      summary: Delete akun by NIP
      description: Delete akun user by NIP
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: []
      responses:
        '204':
          description: No Content
  /role:
    post:
      tags:
        - Role
      summary: Create new role
      description: Create new user role
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/Role'
    get:
      tags:
        - Role
      summary: Get all role
      description: Get all user role
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
  /role/{role}:
    get:
      tags:
        - Role
      summary: Get role by nama
      description: Get user role by nama
      parameters:
        - in: path
          name: role
          required: true
          description: Nama role
          schema:
            type: string
            maxLength: 20
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
        - Role
      summary: Update role by nama
      description: Update user role by nama
      parameters:
        - in: path
          name: role
          required: true
          description: Nama role
          schema:
            type: string
            maxLength: 20
            example: "Dokter"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Role'
    delete:
      tags:
        - Role
      summary: Delete role by nama
      description: Delete user role by nama
      parameters:
        - in: path
          name: role
          required: true
          description: Nama role
          schema:
            type: string
            maxLength: 20
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /jabatan:
    post:
      tags:
        - Jabatan
      summary: Create new jabatan
      description: Create new jabatan pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jabatan'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/Jabatan'
    get:
      tags:
        - Jabatan
      summary: Get all jabatan
      description: Get all jabatan pegawai
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Jabatan'
  /jabatan/{jabatan}:
    get:
      tags:
        - Jabatan
      summary: Get jabatan by nama
      description: Get jabatan pegawai by nama
      parameters:
        - in: path
          name: jabatan
          required: true
          description: Nama jabatan
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Jabatan'
    put:
      tags:
        - Jabatan
      summary: Update jabatan by nama
      description: Update jabatan pegawai by nama
      parameters:
        - in: path
          name: jabatan
          required: true
          description: Nama jabatan
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Jabatan'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Jabatan'
    delete:
      tags:
        - Jabatan
      summary: Delete jabatan by nama
      description: Delete jabatan pegawai by nama
      parameters:
        - in: path
          name: jabatan
          required: true
          description: Nama jabatan
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /departemen:
    post:
      tags:
        - Departemen
      summary: Create new departemen
      description: Create new departemen pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Departemen'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/Departemen'
    get:
      tags:
        - Departemen
      summary: Get all departemen
      description: Get all departemen pegawai
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Departemen'
  /departemen/{departemen}:
    get:
      tags:
        - Departemen
      summary: Get departemen by nama
      description: Get departemen pegawai by nama
      parameters:
        - in: path
          name: departemen
          required: true
          description: Nama departemen
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Departemen'
    put:
      tags:
        - Departemen
      summary: Update departemen by nama
      description: Update departemen pegawai by nama
      parameters:
        - in: path
          name: departemen
          required: true
          description: Nama departemen
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Departemen'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Departemen'
    delete:
      tags:
        - Departemen
      summary: Delete departemen by nama
      description: Delete departemen pegawai by nama
      parameters:
        - in: path
          name: departemen
          required: true
          description: Nama departemen
          schema:
            type: string
            maxLength: 25
            example: "Dokter"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /shift:
    post:
      tags:
        - Shift
      summary: Create new shift
      description: Create new shift pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shift'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/Shift'
    get:
      tags:
        - Shift
      summary: Get all shift
      description: Get all shift pegawai
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shift'
  /shift/{shift}:
    get:
      tags:
        - Shift
      summary: Get shift by nama
      description: Get shift pegawai by nama
      parameters:
        - in: path
          name: shift
          required: true
          description: Nama shift
          schema:
            type: string
            maxLength: 10
            example: "Pagi"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shift'
    put:
      tags:
        - Shift
      summary: Update shift by nama
      description: Update shift pegawai by nama
      parameters:
        - in: path
          name: shift
          required: true
          description: Nama shift
          schema:
            type: string
            maxLength: 10
            example: "Pagi"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shift'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/Shift'
    delete:
      tags:
        - Shift
      summary: Delete shift by nama
      description: Delete shift pegawai by nama
      parameters:
        - in: path
          name: shift
          required: true
          description: Nama shift
          schema:
            type: string
            maxLength: 10
            example: "Pagi"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /jadwal-pegawai:
    post:
      tags:
        - Jadwal Pegawai
      summary: Create new jadwal
      description: Create new jadwal pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JadwalPegawai'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/JadwalPegawai'
    get:
      tags:
        - Jadwal Pegawai
      summary: Get all jadwal pegawai
      description: Get all jadwal pegawai or in nip, tahun, bulan (optional)
      parameters:
        - in: query
          name: nip
          required: false
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
        - in: query
          name: tahun
          required: false
          description: Tahun of the schedule
          schema:
            type: integer
            example: 2021
        - in: query
          name: bulan
          required: false
          description: Bulan of the schedule
          schema:
            type: integer
            example: 1
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/JadwalPegawai'
  /jadwal-pegawai/{tahun}/{bulan}/{hari}/{nip}:
    get:
      tags:
        - Jadwal Pegawai
      summary: Get jadwal pegawai by PK
      description: Get jadwal pegawai by PK
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
        - in: path
          name: tahun
          required: true
          description: Tahun of the schedule
          schema:
            type: integer
            example: 2021
        - in: path
          name: bulan
          required: true
          description: Bulan of the schedule
          schema:
            type: integer
            example: 1
        - in: path
          name: hari
          required: true
          description: Hari of the schedule
          schema:
            type: integer
            example: 1
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JadwalPegawai'
    put:
      tags:
        - Jadwal Pegawai
      summary: Update jadwal pegawai by PK
      description: Update jadwal pegawai by PK
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
        - in: path
          name: tahun
          required: true
          description: Tahun of the schedule
          schema:
            type: integer
            example: 2021
        - in: path
          name: bulan
          required: true
          description: Bulan of the schedule
          schema:
            type: integer
            example: 1
        - in: path
          name: hari
          required: true
          description: Hari of the schedule
          schema:
            type: integer
            example: 1
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JadwalPegawai'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/JadwalPegawai'
    delete:
      tags:
        - Jadwal Pegawai
      summary: Delete jadwal pegawai by PK
      description: Delete jadwal pegawai by PK
      parameters:
        - in: path
          name: nip
          required: true
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
        - in: path
          name: tahun
          required: true
          description: Tahun of the schedule
          schema:
            type: integer
            example: 2021
        - in: path
          name: bulan
          required: true
          description: Bulan of the schedule
          schema:
            type: integer
            example: 1
        - in: path
          name: hari
          required: true
          description: Hari of the schedule
          schema:
            type: integer
            example: 1
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
  /kehadiran/checkin:
    post:
      tags:
        - Kehadiran
      summary: Check in kehadiran
      description: Check in kehadiran pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KehadiranRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: "Created"
                  data:
                    $ref: '#/components/schemas/KehadiranResponse'
  /kehadiran/checkout:
    post:
      tags:
        - Kehadiran
      summary: Check out kehadiran
      description: Check out kehadiran pegawai
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KehadiranResponse'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/KehadiranResponse'
  /kehadiran:
    get:
      tags:
        - Kehadiran
      summary: Get all kehadiran
      description: Get all kehadiran pegawai or per NIP (optional)
      parameters:
        - in: query
          name: nip
          required: false
          description: NIP of the user
          schema:
            type: string
            maxLength: 5
            example: "D0100"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/KehadiranResponse'
  /kehadiran/{id}:
    get:
      tags:
        - Kehadiran
      summary: Get kehadiran by id
      description: Get kehadiran pegawai by id
      parameters:
        - in: path
          name: id
          required: true
          description: ID of kehadiran
          schema:
            type: string
            example: "XXXX-XXXX-XXXX-XXXX"
      security:
        - Authorization: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KehadiranResponse'
    put:
      tags:
        - Kehadiran
      summary: Update kehadiran by id
      description: Update kehadiran pegawai by id
      parameters:
        - in: path
          name: id
          required: true
          description: ID of kehadiran
          schema:
            type: string
            example: "XXXX-XXXX-XXXX-XXXX"
      security:
        - Authorization: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KehadiranRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: '#/components/schemas/KehadiranResponse'
    delete:
      tags:
        - Kehadiran
      summary: Delete kehadiran by id
      description: Delete kehadiran pegawai by id
      parameters:
        - in: path
          name: id
          required: true
          description: ID of kehadiran
          schema:
            type: string
            example: "XXXX-XXXX-XXXX-XXXX"
      security:
        - Authorization: [ ]
      responses:
        '204':
          description: No Content
components:
  securitySchemes:
    Authorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Pegawai:
      type: object
      properties:
        nip:
          type: string
          maxLength: 5
          example: "D0100"
        nik:
          type: string
          maxLength: 16
          example: "3204110201000001"
        nama:
          type: string
          maxLength: 50
          example: "Dokter"
        jenis_kelamin:
          type: string
          enum: [ L, P ]
          example: "L"
        jabatan_nama:
          type: string
          maxLength: 25
          example: "Dokter"
        departemen_nama:
          type: string
          maxLength: 25
          example: "Dokter"
        status_kerja:
          type: string
          enum: [ Tetap, Kontrak ]
          example: "Tetap"
        pendidikan:
          type: string
          enum: [ SD, SMP, SMA, D3, S1, S2, S3 ]
          example: "S1"
        tempat_lahir:
          type: string
          maxLength: 50
          example: "Surabaya"
        tanggal_lahir:
          type: string
          format: date
          example: "2000-01-01"
        alamat:
          type: string
          example: "Kampus ITS Surabaya"
        alamat_lat:
          required: false
          type: string
          example: "-7.2769"
        alamat_lon:
          required: false
          type: string
          example: "112.7947"
        telepon:
          type: string
          maxLength: 15
          example: "081234567890"
        tanggal_masuk:
          type: string
          format: date
          example: "2021-01-01"
        foto:
          required: false
          type: string
          example: "/image/default.png"
    AkunRequest:
      type: object
      properties:
        nip:
          type: string
          maxLength: 5
          example: "D0100"
        email:
          type: string
          format: email
          example: "dokter@fathoor.dev"
        password:
          type: string
          maxLength: 20
          example: "dokter"
        role_nama:
          type: string
          example: "Dokter"
    AkunResponse:
      type: object
      properties:
        nip:
          type: string
          example: "D0100"
        email:
          type: string
          format: email
          example: "dokter@fathoor.dev"
        role_nama:
          type: string
          example: "Dokter"
    Role:
      type: object
      properties:
        nama:
          type: string
          maxLength: 20
          example: "Dokter"
    Jabatan:
      type: object
      properties:
        nama:
          type: string
          maxLength: 25
          example: "Dokter"
        jenjang:
          type: string
          maxLength: 25
          example: "Umum"
        gaji_pokok:
          required: false
          type: number
          example: 5000000
        tunjangan:
          required: false
          type: number
          example: 1000000
    Departemen:
      type: object
      properties:
        nama:
          type: string
          maxLength: 25
          example: "Dokter"
    Shift:
      type: object
      properties:
        nama:
          type: string
          maxLength: 10
          example: "Pagi"
        jam_masuk:
          type: string
          format: time
          example: "07:00:00"
        jam_keluar:
          type: string
          format: time
          example: "15:00:00"
    JadwalPegawai:
      type: object
      properties:
        nip:
          type: string
          maxLength: 5
          example: "D0100"
        tahun:
          type: integer
          example: 2021
        bulan:
          type: integer
          example: 1
        hari:
          type: integer
          example: 1
        shift_nama:
          type: string
          maxLength: 10
          example: "Pagi"
    KehadiranRequest:
      type: object
      properties:
        nip:
          type: string
          maxLength: 5
          example: "D0100"
        tanggal:
          type: string
          format: date
          example: "2021-01-01"
        shift_nama:
          type: string
          maxLength: 10
          example: "Pagi"
    KehadiranResponse:
      type: object
      properties:
        nip:
          type: string
          maxLength: 5
          example: "D0100"
        tanggal:
          type: string
          format: date
          example: "2021-01-01"
        shift:
          type: object
          properties:
            nama:
              type: string
              maxLength: 10
              example: "Pagi"
            jam_masuk:
              type: string
              format: time
              example: "07:00:00"
            jam_keluar:
              type: string
              format: time
              example: "15:00:00"
        jam_masuk:
          type: string
          format: time
          example: "07:00:00"
        jam_keluar:
          type: string
          format: time
          example: "15:00:00"
        keterangan:
          type: string
          example: "Hadir"
